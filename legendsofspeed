local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Legends of Speed | OP",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Legends of Speed | OP",
   LoadingSubtitle = "by Superior's Hub",
   Theme = "DarkBlue", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("âš¡Home", nil) -- Title, Image
local Section = MainTab:CreateSection("OP | AUTOFARM")

local Toggle1 = MainTab:CreateToggle({
   Name = "Auto Hoops",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   wait(1)
_G.Farm3 = false

while _G.Farm3 == true do wait()
for i,v in pairs(game.Workspace.Hoops:GetChildren()) do
v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
end
end
end)
   end,
})

local Toggle2 = MainTab:CreateToggle({
   Name = "Auto Gems",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  wait(1)
_G.Farm2 = false

while _G.Farm2 == true do wait()
for i,v in pairs(game.Workspace.orbFolder.City:GetChildren()) do
if v.Name == "Gem" then
v.outerGem.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
end
end
end
end)
   end,
})

local Toggle3 = MainTab:CreateToggle({
   Name = "Auto Orbs",
   CurrentValue = false,
   Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   wait(1)
_G.Farm1 = false

while _G.Farm1 == true do wait()
for i,v in pairs(game.Workspace.orbFolder.City:GetChildren()) do
if v.Name ~= "Gem" then
v.outerOrb.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
end
end
end
end)
   end,
})

local Toggle4 = MainTab:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   wait(1)
_G.Rebirth = false

while _G.Rebirth == true do wait(5)
local tbl_main = 
{
      "rebirthRequest"
}
game:GetService("ReplicatedStorage").rEvents.rebirthEvent:FireServer(unpack(tbl_main))
end
end)
   end,
})

Rayfield:LoadConfiguration()
